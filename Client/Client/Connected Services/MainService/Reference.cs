//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://mainservice", ConfigurationName="MainService.MainServicePortType")]
    public interface MainServicePortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:userCheck", ReplyAction="urn:userCheckResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<MainService.userCheckResponse> userCheckAsync(MainService.userCheckRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:getQRImage", ReplyAction="urn:getQRImageResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<MainService.getQRImageResponse> getQRImageAsync(MainService.getQRImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:getByteCount", ReplyAction="urn:getByteCountResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<MainService.getByteCountResponse> getByteCountAsync(MainService.getByteCountRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="userCheck", WrapperNamespace="http://mainservice", IsWrapped=true)]
    public partial class userCheckRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string password;
        
        public userCheckRequest()
        {
        }
        
        public userCheckRequest(string username, string password)
        {
            this.username = username;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="userCheckResponse", WrapperNamespace="http://mainservice", IsWrapped=true)]
    public partial class userCheckResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @return;
        
        public userCheckResponse()
        {
        }
        
        public userCheckResponse(string @return)
        {
            this.@return = @return;
        }

        public string get()
        {
            return @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getQRImage", WrapperNamespace="http://mainservice", IsWrapped=true)]
    public partial class getQRImageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string username;
        
        public getQRImageRequest()
        {
        }
        
        public getQRImageRequest(string username)
        {
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getQRImageResponse", WrapperNamespace="http://mainservice", IsWrapped=true)]
    public partial class getQRImageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] @return;
        
        public getQRImageResponse()
        {
        }
        
        public getQRImageResponse(byte[] @return)
        {
            this.@return = @return;
        }

        public byte[] get()
        {
            return @return;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getByteCount", WrapperNamespace="http://mainservice", IsWrapped=true)]
    public partial class getByteCountRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] bytes;
        
        public getByteCountRequest()
        {
        }
        
        public getByteCountRequest(byte[] bytes)
        {
            this.bytes = bytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getByteCountResponse", WrapperNamespace="http://mainservice", IsWrapped=true)]
    public partial class getByteCountResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mainservice", Order=0)]
        public int @return;
        
        public getByteCountResponse()
        {
        }
        
        public getByteCountResponse(int @return)
        {
            this.@return = @return;
        }

        public int get()
        {
            return @return;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface MainServicePortTypeChannel : MainService.MainServicePortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class MainServicePortTypeClient : System.ServiceModel.ClientBase<MainService.MainServicePortType>, MainService.MainServicePortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MainServicePortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(MainServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), MainServicePortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServicePortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MainServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServicePortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MainServicePortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServicePortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MainService.userCheckResponse> MainService.MainServicePortType.userCheckAsync(MainService.userCheckRequest request)
        {
            return base.Channel.userCheckAsync(request);
        }
        
        public System.Threading.Tasks.Task<MainService.userCheckResponse> userCheckAsync(string username, string password)
        {
            MainService.userCheckRequest inValue = new MainService.userCheckRequest();
            inValue.username = username;
            inValue.password = password;
            return ((MainService.MainServicePortType)(this)).userCheckAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MainService.getQRImageResponse> MainService.MainServicePortType.getQRImageAsync(MainService.getQRImageRequest request)
        {
            return base.Channel.getQRImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<MainService.getQRImageResponse> getQRImageAsync(string username)
        {
            MainService.getQRImageRequest inValue = new MainService.getQRImageRequest();
            inValue.username = username;
            return ((MainService.MainServicePortType)(this)).getQRImageAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MainService.getByteCountResponse> MainService.MainServicePortType.getByteCountAsync(MainService.getByteCountRequest request)
        {
            return base.Channel.getByteCountAsync(request);
        }
        
        public System.Threading.Tasks.Task<MainService.getByteCountResponse> getByteCountAsync(byte[] bytes)
        {
            MainService.getByteCountRequest inValue = new MainService.getByteCountRequest();
            inValue.bytes = bytes;
            return ((MainService.MainServicePortType)(this)).getByteCountAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MainServiceHttpSoap11Endpoint))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.MainServiceHttpSoap12Endpoint))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.MainServiceHttpSoap11Endpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/Oblig2Services/services/MainService.MainServiceHttpSoap11En" +
                        "dpoint/");
            }
            if ((endpointConfiguration == EndpointConfiguration.MainServiceHttpSoap12Endpoint))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/Oblig2Services/services/MainService.MainServiceHttpSoap12En" +
                        "dpoint/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            MainServiceHttpSoap11Endpoint,
            
            MainServiceHttpSoap12Endpoint,
        }
    }
}
